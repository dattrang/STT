import streamlit as st
from dataclasses import dataclass, asdict
from typing import Optional
import time
import sqlite3
from gtts import gTTS
import tempfile
import os
import base64
# C·∫•u h√¨nh trang Streamlit
st.set_page_config(
    page_title="H·ªá th·ªëng ƒëƒÉng k√Ω ch·ªù l√†m th·ªß t·ª•c",
    page_icon="üé´",
    layout="wide"
)

# ƒê·ªãnh nghƒ©a l·ªõp Customer
@dataclass
class Customer:
    name: str
    cccd: str
    ticket_number: int
    timestamp: float

    def to_dict(self):
        return asdict(self)

    @staticmethod
    def from_dict(data):
        return Customer(**data)

# H√†m t·∫°o √¢m thanh
def create_audio(text: str) -> Optional[str]:
    try:
        tts = gTTS(text=text, lang='vi')
        with tempfile.NamedTemporaryFile(delete=False, suffix='.mp3') as fp:
            tts.save(fp.name)
            return fp.name
    except Exception as e:
        st.error(f"L·ªói t·∫°o √¢m thanh: {str(e)}")
        return None

def play_audio_autoplay(file_path: str):
    with open(file_path, 'rb') as audio_file:
        audio_bytes = audio_file.read()
        audio_base64 = base64.b64encode(audio_bytes).decode()

        # Ch√®n ƒëo·∫°n m√£ HTML ƒë·ªÉ t·ª± ƒë·ªông ph√°t √¢m thanh
        audio_html = f"""
        <audio autoplay="true" style="display:none;">
            <source src="data:audio/mp3;base64,{audio_base64}" type="audio/mp3">
        </audio>
        """
        st.markdown(audio_html, unsafe_allow_html=True)


# K·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu SQLite
@st.cache_resource
def get_db_connection():
    conn = sqlite3.connect('queue_management.db', check_same_thread=False)
    conn.row_factory = sqlite3.Row
    return conn

# Kh·ªüi t·∫°o c∆° s·ªü d·ªØ li·ªáu
def init_db():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS customers (
            cccd TEXT PRIMARY KEY,
            name TEXT,
            ticket_number INTEGER,
            timestamp REAL
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS desks (
            desk_id INTEGER PRIMARY KEY,
            current_customer_cccd TEXT,
            FOREIGN KEY(current_customer_cccd) REFERENCES customers(cccd)
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS queues (
            desk_id INTEGER,
            cccd TEXT,
            position INTEGER,
            FOREIGN KEY(desk_id) REFERENCES desks(desk_id),
            FOREIGN KEY(cccd) REFERENCES customers(cccd),
            PRIMARY KEY(desk_id, cccd)
        )
    ''')
    for desk_id in [1, 2]:
        cursor.execute('INSERT OR IGNORE INTO desks (desk_id) VALUES (?)', (desk_id,))
    conn.commit()

# H√†m th√™m kh√°ch h√†ng m·ªõi
def add_customer(name: str, cccd: str) -> tuple:
    conn = get_db_connection()
    cursor = conn.cursor()

    cursor.execute('SELECT * FROM customers WHERE cccd = ?', (cccd,))
    if cursor.fetchone():
        return -1, -1, -1

    cursor.execute('SELECT MAX(ticket_number) FROM customers')
    result = cursor.fetchone()
    next_number = result[0] + 1 if result[0] else 1

    timestamp = time.time()
    customer = Customer(name, cccd, next_number, timestamp)

    cursor.execute('''
        INSERT INTO customers (cccd, name, ticket_number, timestamp)
        VALUES (?, ?, ?, ?)
    ''', (customer.cccd, customer.name, customer.ticket_number, customer.timestamp))

    desk_id = get_least_busy_desk(cursor)
    position = enqueue_customer(cursor, desk_id, customer.cccd)

    conn.commit()
    
    return position, next_number, desk_id

def get_least_busy_desk(cursor) -> int:
    cursor.execute('''
        SELECT desk_id, COUNT(cccd) as queue_length
        FROM queues
        GROUP BY desk_id
    ''')
    result = cursor.fetchall()
    
    if not result:
        return 1 if time.time() % 2 < 1 else 2
    
    desk_queue_lengths = {1: 0, 2: 0}
    for row in result:
        desk_queue_lengths[row['desk_id']] = row['queue_length']
    
    return 1 if desk_queue_lengths[1] <= desk_queue_lengths[2] else 2

def enqueue_customer(cursor, desk_id: int, cccd: str) -> int:
    cursor.execute('SELECT MAX(position) FROM queues WHERE desk_id = ?', (desk_id,))
    result = cursor.fetchone()
    next_position = result[0] + 1 if result[0] else 1

    cursor.execute('''
        INSERT INTO queues (desk_id, cccd, position)
        VALUES (?, ?, ?)
    ''', (desk_id, cccd, next_position))

    return next_position

def process_next_customer(desk_id: int) -> Optional[Customer]:
    # S·ª≠ d·ª•ng ng·ªØ c·∫£nh `with` ƒë·ªÉ ƒë·∫£m b·∫£o k·∫øt n·ªëi ƒë∆∞·ª£c m·ªü/ƒë√≥ng ƒë√∫ng c√°ch
    with get_db_connection() as conn:
        cursor = conn.cursor()

        cursor.execute('''
            SELECT customers.* FROM queues
            JOIN customers ON queues.cccd = customers.cccd
            WHERE desk_id = ?
            ORDER BY position ASC
            LIMIT 1
        ''', (desk_id,))
        result = cursor.fetchone()

        if result:
            customer = Customer.from_dict(result)
            cursor.execute('''
                UPDATE desks SET current_customer_cccd = ?
                WHERE desk_id = ?
            ''', (customer.cccd, desk_id))
            cursor.execute('''
                DELETE FROM queues WHERE desk_id = ? AND cccd = ?
            ''', (desk_id, customer.cccd))
            conn.commit()
            return customer
        else:
            cursor.execute('''
                UPDATE desks SET current_customer_cccd = NULL
                WHERE desk_id = ?
            ''', (desk_id,))
            conn.commit()
            return None

def get_desk_status(desk_id: int):
    conn = get_db_connection()
    cursor = conn.cursor()

    cursor.execute('''
        SELECT customers.* FROM desks
        LEFT JOIN customers ON desks.current_customer_cccd = customers.cccd
        WHERE desk_id = ?
    ''', (desk_id,))
    current_customer = cursor.fetchone()
    current_customer = Customer.from_dict(current_customer) if current_customer and current_customer['cccd'] else None

    cursor.execute('''
        SELECT customers.* FROM queues
        JOIN customers ON queues.cccd = customers.cccd
        WHERE desk_id = ?
        ORDER BY position ASC
    ''', (desk_id,))
    queue = [Customer.from_dict(row) for row in cursor.fetchall()]

    return current_customer, queue

def render_desk_status(desk_id: int):
    current_customer, queue = get_desk_status(desk_id)

    st.subheader(f"B√†n {desk_id}")
    st.markdown("##### ƒêang l√†m th·ªß t·ª•c:")
    
    if current_customer:
        st.markdown(f"""
        <div style='background-color: #e6f3ff; padding: 10px; border-radius: 5px;'>
            <h3 style='color: #0066cc;'>{current_customer.name}</h3>
            <p>S·ªë th·ª© t·ª±: {current_customer.ticket_number}</p>
        </div>
        """, unsafe_allow_html=True)
    else:
        st.markdown("<p style='color: #666;'>Ch∆∞a c√≥ c√¥ng d√¢n l√†m th·ªß t·ª•c</p>", unsafe_allow_html=True)

    st.markdown("##### Danh s√°ch ch·ªù:")

    # T·∫°o v√πng danh s√°ch c√≥ cu·ªôn khi v∆∞·ª£t qu√° chi·ªÅu cao 200px
    list_html = "<div style='height: 200px; overflow-y: scroll; border: 1px solid #ccc; padding: 10px; border-radius: 5px;'>"

    if queue:
        for i, customer in enumerate(queue, 1):
            list_html += f"<p>{i}. {customer.name} - S·ªë {customer.ticket_number}</p>"
    else:
        list_html += "<p style='color: #666;'>Kh√¥ng c√≥ c√¥ng d√¢n ƒëƒÉng k√Ω ch·ªù</p>"

    list_html += "</div>"

    st.markdown(list_html, unsafe_allow_html=True)

def registration_form():
    st.header("ƒêƒÉng k√Ω x·∫øp h√†ng l·∫•y s·ªë th·ª© t·ª±")
    with st.form("register_form"):
        name = st.text_input("H·ªç v√† t√™n:")
        cccd = st.text_input("S·ªë CCCD (12 s·ªë):")
        submitted = st.form_submit_button("ƒêƒÉng k√Ω")

        if submitted:
            if not name or not cccd:
                st.error("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin")
                return

            if not cccd.isdigit() or len(cccd) != 12:
                st.error("S·ªë CCCD kh√¥ng h·ª£p l·ªá")
                return

            position, ticket_number, desk_id = add_customer(name, cccd)
            if position != -1:
                success_msg = f"ƒêƒÉng k√Ω th√†nh c√¥ng! S·ªë th·ª© t·ª± c·ªßa b·∫°n l√† {ticket_number}. B·∫°n ·ªü v·ªã tr√≠ {position} trong h√†ng ƒë·ª£i t·∫°i B√†n {desk_id}."
                st.success(success_msg)
                st.rerun()
            else:
                st.error("S·ªë CCCD ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω")

def skip_customer(desk_id: int):
    # M·ªü k·∫øt n·ªëi v·ªõi c∆° s·ªü d·ªØ li·ªáu
    with get_db_connection() as conn:
        cursor = conn.cursor()

        # L·∫•y kh√°ch h√†ng hi·ªán t·∫°i ƒëang ƒë∆∞·ª£c ph·ª•c v·ª• t·∫°i b√†n
        cursor.execute('''
            SELECT current_customer_cccd FROM desks
            WHERE desk_id = ?
        ''', (desk_id,))
        result = cursor.fetchone()

        if result and result['current_customer_cccd']:
            cccd_to_skip = result['current_customer_cccd']

            # L·∫•y v·ªã tr√≠ cao nh·∫•t hi·ªán t·∫°i trong h√†ng ƒë·ª£i
            cursor.execute('''
                SELECT MAX(position) FROM queues
                WHERE desk_id = ?
            ''', (desk_id,))
            max_position = cursor.fetchone()[0] or 0  # N·∫øu h√†ng ƒë·ª£i r·ªóng, v·ªã tr√≠ t·ªëi ƒëa l√† 0

            # ƒê·∫©y kh√°ch h√†ng hi·ªán t·∫°i xu·ªëng cu·ªëi h√†ng ƒë·ª£i
            new_position = max_position + 1
            cursor.execute('''
                INSERT INTO queues (desk_id, cccd, position)
                VALUES (?, ?, ?)
            ''', (desk_id, cccd_to_skip, new_position))

            # C·∫≠p nh·∫≠t b√†n hi·ªán t·∫°i kh√¥ng c√≥ kh√°ch h√†ng ph·ª•c v·ª•
            cursor.execute('''
                UPDATE desks SET current_customer_cccd = NULL
                WHERE desk_id = ?
            ''', (desk_id,))

            conn.commit()

            # G·ªçi kh√°ch h√†ng ti·∫øp theo (s·ª≠ d·ª•ng h√†m process_next_customer)
            customer = process_next_customer(desk_id)

            # N·∫øu c√≥ kh√°ch h√†ng ti·∫øp theo, ph√°t √¢m thanh th√¥ng b√°o
            if customer:
                announce = f"M·ªùi c√¥ng d√¢n {customer.name}, s·ªë th·ª© t·ª± {customer.ticket_number}, ƒë·∫øn B√†n {desk_id}"
                st.session_state[f'audio_message_ban{desk_id}'] = announce  # L∆∞u tr·∫°ng th√°i th√¥ng b√°o
                st.rerun()
        else:
            st.warning("Kh√¥ng c√≥ c√¥ng d√¢n n√†o ƒëang l√†m th·ªß t·ª•c t·∫°i b√†n n√†y.")

def process_customers():
    st.sidebar.header("X·ª≠ l√Ω c√¥ng d√¢n")

    # ƒê·∫∑t m·∫≠t kh·∫©u ƒë√∫ng (b·∫°n c√≥ th·ªÉ thay ƒë·ªïi m·∫≠t kh·∫©u n√†y)
    correct_password = "Tanhung@2020"

    # N·∫øu ch∆∞a x√°c th·ª±c, hi·ªÉn th·ªã √¥ nh·∫≠p m·∫≠t kh·∫©u
    if 'authenticated' not in st.session_state:
        st.session_state['authenticated'] = False

    if not st.session_state['authenticated']:
        password = st.sidebar.text_input("Nh·∫≠p m·∫≠t kh·∫©u ƒë·ªÉ x·ª≠ l√Ω", type="password")

        # Ki·ªÉm tra n·∫øu m·∫≠t kh·∫©u ƒë√∫ng
        if password == correct_password:
            st.session_state['authenticated'] = True  # ƒê√°nh d·∫•u ƒë√£ x√°c th·ª±c
            st.rerun()  # T·∫£i l·∫°i trang ƒë·ªÉ ·∫©n √¥ nh·∫≠p m·∫≠t kh·∫©u
        elif password:  # N·∫øu m·∫≠t kh·∫©u nh·∫≠p kh√¥ng ƒë√∫ng
            st.sidebar.error("M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!")
    
    # Sau khi x√°c th·ª±c, hi·ªÉn th·ªã c√°c n√∫t x·ª≠ l√Ω v√† n√∫t x√≥a d·ªØ li·ªáu
    if st.session_state['authenticated']:
        col1, col2 = st.sidebar.columns(2)

        # B√†n 1
        with col1:
            if st.button("B·ªè qua - B√†n 1"):
                skip_customer(1)
                st.rerun()
            if st.button("G·ªçi c√¥ng d√¢n - B√†n 1"):
                customer = process_next_customer(1)
                if customer:
                    announce = f"M·ªùi C√¥ng d√¢n {customer.name}, s·ªë th·ª© t·ª± {customer.ticket_number}, ƒë·∫øn B√†n 1"
                    st.session_state['audio_message_ban1'] = announce  # L∆∞u tr·∫°ng th√°i cho B√†n 1
                    st.session_state['audio_desk'] = 1
                    st.rerun()

        # B√†n 2
        with col2:
            if st.button("B·ªè qua - B√†n 2"):
                skip_customer(2)
                st.rerun()
            if st.button("G·ªçi c√¥ng d√¢n - B√†n 2"):
                customer = process_next_customer(2)
                if customer:
                    announce = f"M·ªùi c√¥ng d√¢n {customer.name}, s·ªë th·ª© t·ª± {customer.ticket_number}, ƒë·∫øn B√†n 2"
                    st.session_state['audio_message_ban2'] = announce  # L∆∞u tr·∫°ng th√°i cho B√†n 2
                    st.session_state['audio_desk'] = 2
                    st.rerun()

        # Hi·ªÉn th·ªã n√∫t x√≥a d·ªØ li·ªáu khi m·∫≠t kh·∫©u ƒë√∫ng
        if st.sidebar.button('Xo√° d·ªØ li·ªáu'):
            reset_database()


def reset_database():
    conn = get_db_connection()
    cursor = conn.cursor()
    
    try:
        cursor.execute('DELETE FROM customers')
        cursor.execute('DELETE FROM desks')
        cursor.execute('DELETE FROM queues')
        cursor.execute('INSERT OR IGNORE INTO desks (desk_id) VALUES (1)')
        cursor.execute('INSERT OR IGNORE INTO desks (desk_id) VALUES (2)')
        conn.commit()
        st.success("C∆° s·ªü d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c reset th√†nh c√¥ng!")
        st.rerun()
    except Exception as e:
        st.error(f"C√≥ l·ªói x·∫£y ra khi reset c∆° s·ªü d·ªØ li·ªáu: {str(e)}")

def check_status():
    st.sidebar.header("Ki·ªÉm tra s·ªë th·ª© t·ª±")
    cccd = st.sidebar.text_input("Nh·∫≠p s·ªë CCCD ƒë·ªÉ ki·ªÉm tra")
    if st.sidebar.button("Ki·ªÉm tra"):
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM customers WHERE cccd = ?', (cccd,))
        customer = cursor.fetchone()
        if customer:
            customer = Customer.from_dict(customer)
            cursor.execute('SELECT desk_id FROM desks WHERE current_customer_cccd = ?', (cccd,))
            result = cursor.fetchone()
            if result:
                st.sidebar.success(f"ƒêang l√†m th·ªß t·ª•c t·∫°i B√†n {result['desk_id']}")
            else:
                cursor.execute('SELECT desk_id, position FROM queues WHERE cccd = ?', (cccd,))
                result = cursor.fetchone()
                if result:
                    st.sidebar.info(f"ƒêang ch·ªù t·∫°i B√†n {result['desk_id']}, v·ªã tr√≠ th·ª© {result['position']}")
                else:
                    st.sidebar.warning("B·∫°n ƒë√£ l√†m th·ªß t·ª•c ho·∫∑c ch∆∞a ƒëƒÉng k√Ω")
        else:
            st.sidebar.error("Kh√¥ng t√¨m th·∫•y th√¥ng tin")

def main():
    st.title("üé´ H·ªá th·ªëng x·∫øp h√†ng")
    
    # Kh·ªüi t·∫°o c∆° s·ªü d·ªØ li·ªáu
    init_db()
    
    # T·∫°o layout ch√≠nh
    col1, col2 = st.columns(2)
    with col1:
        render_desk_status(1)
    with col2:
        render_desk_status(2)

    # Ph√°t √¢m thanh cho B√†n 1 n·∫øu c√≥ th√¥ng b√°o
    if 'audio_message_ban1' in st.session_state and st.session_state['audio_message_ban1']:
        audio_message = st.session_state['audio_message_ban1']
        st.success(audio_message)
        audio_file = create_audio(audio_message)
        if audio_file:
            play_audio_autoplay(audio_file)  # T·ª± ƒë·ªông ph√°t √¢m thanh
            os.unlink(audio_file)
        del st.session_state['audio_message_ban1']  # X√≥a tr·∫°ng th√°i sau khi ph√°t xong

    # Ph√°t √¢m thanh cho B√†n 2 n·∫øu c√≥ th√¥ng b√°o
    if 'audio_message_ban2' in st.session_state and st.session_state['audio_message_ban2']:
        audio_message = st.session_state['audio_message_ban2']
        st.success(audio_message)
        audio_file = create_audio(audio_message)
        if audio_file:
            play_audio_autoplay(audio_file)  # T·ª± ƒë·ªông ph√°t √¢m thanh
            os.unlink(audio_file)
        del st.session_state['audio_message_ban2']  # X√≥a tr·∫°ng th√°i sau khi ph√°t xong

    # Form ƒëƒÉng k√Ω
    registration_form()
    
    # X·ª≠ l√Ω kh√°ch h√†ng v√† ki·ªÉm tra tr·∫°ng th√°i
    process_customers()
    check_status()
    

if __name__ == "__main__":
    main()
