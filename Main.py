import streamlit as st
from dataclasses import dataclass, asdict
from typing import Optional
import time
import sqlite3
from gtts import gTTS
import tempfile
import os
import base64
import pandas as pd

# C·∫•u h√¨nh trang Streamlit
st.set_page_config(
    page_title="H·ªá th·ªëng ƒëƒÉng k√Ω ch·ªù l√†m th·ªß t·ª•c",
    page_icon="üé´",
    layout="wide"
)

# ƒê·ªãnh nghƒ©a l·ªõp Customer
@dataclass
class Customer:
    name: str
    cccd: str
    ticket_number: int
    timestamp: float
    status: str = 'Ch∆∞a ƒë∆∞·ª£c ph·ª•c v·ª•'  # Th√™m thu·ªôc t√≠nh status v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh

    def to_dict(self):
        return asdict(self)

    @staticmethod
    def from_dict(data):
        return Customer(**data)

# K·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu SQLite
def get_db_connection():
    db_path = 'queue_management.db'
    conn = sqlite3.connect(db_path, check_same_thread=False)
    conn.row_factory = sqlite3.Row
    return conn

def check_status():
    st.sidebar.header("Ki·ªÉm tra s·ªë th·ª© t·ª±")
    cccd = st.sidebar.text_input("Nh·∫≠p s·ªë CCCD ƒë·ªÉ ki·ªÉm tra")
    if st.sidebar.button("Ki·ªÉm tra"):
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM customers WHERE cccd = ?', (cccd,))
        customer = cursor.fetchone()
        if customer:
            customer = Customer.from_dict(customer)
            # Ki·ªÉm tra n·∫øu c√¥ng d√¢n ƒëang l√†m th·ªß t·ª•c t·∫°i b√†n n√†o ƒë√≥
            cursor.execute('SELECT desk_id FROM desks WHERE current_customer_cccd = ?', (cccd,))
            result = cursor.fetchone()
            if result:
                st.sidebar.success(f"ƒêang l√†m th·ªß t·ª•c t·∫°i B√†n {result['desk_id']}")
            else:
                # Ki·ªÉm tra xem c√¥ng d√¢n ƒëang ch·ªù ·ªü ƒë√¢u trong h√†ng ƒë·ª£i
                cursor.execute('SELECT desk_id, position FROM queues WHERE cccd = ?', (cccd,))
                result = cursor.fetchone()
                if result:
                    st.sidebar.info(f"ƒêang ch·ªù t·∫°i B√†n {result['desk_id']}, v·ªã tr√≠ th·ª© {result['position']}")
                else:
                    st.sidebar.warning("B·∫°n ƒë√£ l√†m th·ªß t·ª•c ho·∫∑c ch∆∞a ƒëƒÉng k√Ω")
        else:
            st.sidebar.error("Kh√¥ng t√¨m th·∫•y th√¥ng tin")

            
# H√†m t·∫°o √¢m thanh
def create_audio(text: str) -> Optional[str]:
    try:
        tts = gTTS(text=text, lang='vi')
        with tempfile.NamedTemporaryFile(delete=False, suffix='.mp3') as fp:
            tts.save(fp.name)
            return fp.name
    except Exception as e:
        st.error(f"L·ªói t·∫°o √¢m thanh: {str(e)}")
        return None

def play_audio_autoplay(file_path: str):
    with open(file_path, 'rb') as audio_file:
        audio_bytes = audio_file.read()
        audio_base64 = base64.b64encode(audio_bytes).decode()

        # Ch√®n ƒëo·∫°n m√£ HTML ƒë·ªÉ t·ª± ƒë·ªông ph√°t √¢m thanh
        audio_html = f"""
        <audio autoplay="true" style="display:none;">
            <source src="data:audio/mp3;base64,{audio_base64}" type="audio/mp3">
        </audio>
        """
        st.markdown(audio_html, unsafe_allow_html=True)

# Kh·ªüi t·∫°o c∆° s·ªü d·ªØ li·ªáu
def init_db():
    conn = get_db_connection()
    cursor = conn.cursor()

    # T·∫°o b·∫£ng 'customers' n·∫øu ch∆∞a t·ªìn t·∫°i
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS customers (
            cccd TEXT PRIMARY KEY,
            name TEXT,
            ticket_number INTEGER,
            timestamp REAL
        )
    ''')

    # Th√™m c·ªôt 'status' n·∫øu ch∆∞a c√≥
    cursor.execute("PRAGMA table_info(customers)")
    columns = [column[1] for column in cursor.fetchall()]
    if 'status' not in columns:
        cursor.execute('ALTER TABLE customers ADD COLUMN status TEXT DEFAULT "Ch∆∞a ƒë∆∞·ª£c ph·ª•c v·ª•"')

    # T·∫°o c√°c b·∫£ng kh√°c
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS desks (
            desk_id INTEGER PRIMARY KEY,
            current_customer_cccd TEXT,
            FOREIGN KEY(current_customer_cccd) REFERENCES customers(cccd)
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS queues (
            desk_id INTEGER,
            cccd TEXT,
            position INTEGER,
            FOREIGN KEY(desk_id) REFERENCES desks(desk_id),
            FOREIGN KEY(cccd) REFERENCES customers(cccd),
            PRIMARY KEY(desk_id, cccd)
        )
    ''')
    for desk_id in [1, 2]:
        cursor.execute('INSERT OR IGNORE INTO desks (desk_id) VALUES (?)', (desk_id,))
    conn.commit()
    conn.close()


# H√†m th√™m kh√°ch h√†ng m·ªõi
def add_customer(name: str, cccd: str) -> tuple:
    conn = get_db_connection()
    cursor = conn.cursor()

    try:
        # Ki·ªÉm tra n·∫øu kh√°ch h√†ng ƒë√£ t·ªìn t·∫°i
        cursor.execute('SELECT * FROM customers WHERE cccd = ?', (cccd,))
        if cursor.fetchone():
            return -1, -1, -1

        # T√≠nh s·ªë th·ª© t·ª± (ticket_number) ti·∫øp theo
        cursor.execute('SELECT MAX(ticket_number) FROM customers')
        result = cursor.fetchone()
        next_number = result[0] + 1 if result[0] else 1

        # L∆∞u timestamp hi·ªán t·∫°i
        timestamp = time.time()

        # T·∫°o kh√°ch h√†ng m·ªõi v·ªõi tr·∫°ng th√°i m·∫∑c ƒë·ªãnh 'Ch∆∞a ƒë∆∞·ª£c ph·ª•c v·ª•'
        customer = Customer(name, cccd, next_number, timestamp)

        # Th√™m kh√°ch h√†ng v√†o b·∫£ng 'customers'
        cursor.execute('''
            INSERT INTO customers (cccd, name, ticket_number, timestamp, status)
            VALUES (?, ?, ?, ?, ?)
        ''', (customer.cccd, customer.name, customer.ticket_number, customer.timestamp, customer.status))

        # Ch·ªçn b√†n c√≥ √≠t ng∆∞·ªùi nh·∫•t
        desk_id = get_least_busy_desk(cursor)

        # Th√™m kh√°ch h√†ng v√†o h√†ng ƒë·ª£i
        position = enqueue_customer(cursor, desk_id, customer.cccd)

        # Commit c√°c thay ƒë·ªïi v√†o c∆° s·ªü d·ªØ li·ªáu
        conn.commit()

        return position, next_number, desk_id
    except sqlite3.OperationalError as e:
        st.error(f"L·ªói c∆° s·ªü d·ªØ li·ªáu: {e}")
        return -1, -1, -1
    finally:
        if conn:
            conn.close()  # ƒê√≥ng k·∫øt n·ªëi sau khi ho√†n t·∫•t m·ªçi thao t√°c

def get_least_busy_desk(cursor) -> int:
    cursor.execute('''
        SELECT desk_id, COUNT(cccd) as queue_length
        FROM queues
        GROUP BY desk_id
    ''')
    result = cursor.fetchall()

    if not result:
        return 1 if time.time() % 2 < 1 else 2

    desk_queue_lengths = {1: 0, 2: 0}
    for row in result:
        desk_queue_lengths[row['desk_id']] = row['queue_length']

    return 1 if desk_queue_lengths[1] <= desk_queue_lengths[2] else 2

def enqueue_customer(cursor, desk_id: int, cccd: str) -> int:
    cursor.execute('SELECT MAX(position) FROM queues WHERE desk_id = ?', (desk_id,))
    result = cursor.fetchone()
    next_position = result[0] + 1 if result[0] else 1

    cursor.execute('''
        INSERT INTO queues (desk_id, cccd, position)
        VALUES (?, ?, ?)
    ''', (desk_id, cccd, next_position))

    return next_position

def process_next_customer(desk_id: int) -> Optional[Customer]:
    conn = get_db_connection()
    cursor = conn.cursor()

    # Truy v·∫•n c√¥ng d√¢n hi·ªán t·∫°i t·∫°i b√†n
    cursor.execute('''
        SELECT current_customer_cccd FROM desks WHERE desk_id = ?
    ''', (desk_id,))
    current_customer = cursor.fetchone()

    if current_customer and current_customer['current_customer_cccd']:
        # C·∫≠p nh·∫≠t tr·∫°ng th√°i c√¥ng d√¢n hi·ªán t·∫°i th√†nh "ƒê√£ l√†m xong"
        cursor.execute('''
            UPDATE customers SET status = 'ƒê√£ l√†m xong' WHERE cccd = ?
        ''', (current_customer['current_customer_cccd'],))

    # L·∫•y c√¥ng d√¢n ti·∫øp theo trong h√†ng ƒë·ª£i
    cursor.execute('''
        SELECT customers.* FROM queues
        JOIN customers ON queues.cccd = customers.cccd
        WHERE desk_id = ?
        ORDER BY position ASC
        LIMIT 1
    ''', (desk_id,))
    next_customer = cursor.fetchone()

    if next_customer:
        # C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa c√¥ng d√¢n ti·∫øp theo th√†nh "ƒêang l√†m th·ªß t·ª•c"
        cursor.execute('''
            UPDATE customers SET status = 'ƒêang l√†m th·ªß t·ª•c' WHERE cccd = ?
        ''', (next_customer['cccd'],))

        # C·∫≠p nh·∫≠t b√†n hi·ªán t·∫°i ƒëang ph·ª•c v·ª• c√¥ng d√¢n n√†y
        cursor.execute('''
            UPDATE desks SET current_customer_cccd = ? WHERE desk_id = ?
        ''', (next_customer['cccd'], desk_id))

        # X√≥a c√¥ng d√¢n kh·ªèi h√†ng ƒë·ª£i
        cursor.execute('''
            DELETE FROM queues WHERE desk_id = ? AND cccd = ?
        ''', (desk_id, next_customer['cccd']))

        conn.commit()
        return Customer.from_dict(next_customer)
    else:
        # Kh√¥ng c√≥ c√¥ng d√¢n n√†o trong h√†ng ƒë·ª£i
        cursor.execute('''
            UPDATE desks SET current_customer_cccd = NULL WHERE desk_id = ?
        ''', (desk_id,))
        conn.commit()
        return None


def render_desk_status(desk_id: int):
    conn = get_db_connection()
    cursor = conn.cursor()

    cursor.execute('''
        SELECT customers.* FROM desks
        LEFT JOIN customers ON desks.current_customer_cccd = customers.cccd
        WHERE desks.desk_id = ?
    ''', (desk_id,))
    current_customer = cursor.fetchone()

    st.subheader(f"B√†n {desk_id}")
    st.markdown("##### ƒêang l√†m th·ªß t·ª•c:")

    if current_customer and current_customer['cccd']:
        st.markdown(f"""
        <div style='background-color: #e6f3ff; padding: 10px; border-radius: 5px;'>
            <h3 style='color: #0066cc;'>{current_customer['name']}</h3>
            <p>S·ªë th·ª© t·ª±: {current_customer['ticket_number']}</p>
        </div>
        """, unsafe_allow_html=True)
    else:
        st.markdown("<p style='color: #666;'>Ch∆∞a c√≥ c√¥ng d√¢n l√†m th·ªß t·ª•c</p>", unsafe_allow_html=True)

    st.markdown("##### Danh s√°ch ch·ªù:")

    cursor.execute('''
        SELECT customers.* FROM queues
        JOIN customers ON queues.cccd = customers.cccd
        WHERE queues.desk_id = ?
        ORDER BY position ASC
    ''', (desk_id,))
    queue = cursor.fetchall()

    list_html = "<div style='height: 200px; overflow-y: scroll; border: 1px solid #ccc; padding: 10px; border-radius: 5px;'>"

    if queue:
        for i, customer in enumerate(queue, 1):
            list_html += f"<p>{i}. {customer['name']} - S·ªë {customer['ticket_number']}</p>"
    else:
        list_html += "<p style='color: #666;'>Kh√¥ng c√≥ c√¥ng d√¢n ƒëƒÉng k√Ω ch·ªù</p>"

    list_html += "</div>"

    st.markdown(list_html, unsafe_allow_html=True)

# Th√™m c√°c t√≠nh nƒÉng hi·ªÉn th·ªã, ·∫©n b·∫£ng v√† t·∫£i xu·ªëng danh s√°ch
def get_registered_customers():
    conn = get_db_connection()
    cursor = conn.cursor()

    # Truy v·∫•n d·ªØ li·ªáu bao g·ªìm c·∫£ c·ªôt 'status'
    cursor.execute('''
        SELECT name, cccd, ticket_number, status
        FROM customers
    ''')

    rows = cursor.fetchall()

    if not rows:
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu ƒëƒÉng k√Ω.")
        return pd.DataFrame()

    data = []
    for row in rows:
        data.append({
            'H·ªç v√† t√™n': row['name'],
            'S·ªë CCCD': row['cccd'],
            'S·ªë th·ª© t·ª±': row['ticket_number'],
            'Tr·∫°ng th√°i': row['status']  # Hi·ªÉn th·ªã tr·∫°ng th√°i
        })

    df = pd.DataFrame(data)
    return df

def registration_form():
    st.header("ƒêƒÉng k√Ω x·∫øp h√†ng l·∫•y s·ªë th·ª© t·ª±")

    if 'name' not in st.session_state:
        st.session_state['name'] = ""
    if 'cccd' not in st.session_state:
        st.session_state['cccd'] = ""

    if 'success_msg' not in st.session_state:
        st.session_state['success_msg'] = ""

    with st.form("register_form"):
        name = st.text_input("H·ªç v√† t√™n:", value=st.session_state['name'])
        cccd = st.text_input("S·ªë CCCD (12 s·ªë):", value=st.session_state['cccd'])
        submitted = st.form_submit_button("ƒêƒÉng k√Ω")

        if submitted:
            if not name or not cccd:
                st.error("Vui l√≤ng ƒëi·ªÅn ƒë·ªß th√¥ng tin")
                return

            if not cccd.isdigit() or len(cccd) != 12:
                st.error("S·ªë CCCD kh√¥ng h·ª£p l·ªá")
                return

            position, ticket_number, desk_id = add_customer(name, cccd)
            if position != -1:
                st.session_state['success_msg'] = (
                    f"ƒêƒÉng k√Ω th√†nh c√¥ng! S·ªë th·ª© t·ª± c·ªßa b·∫°n l√† {ticket_number}. "
                    f"B·∫°n ·ªü v·ªã tr√≠ {position} trong h√†ng ƒë·ª£i t·∫°i B√†n {desk_id}."
                )

                st.session_state['name'] = ""
                st.session_state['cccd'] = ""

                st.rerun()
            else:
                st.error("S·ªë CCCD ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω")

    if st.session_state['success_msg']:
        st.success(st.session_state['success_msg'])
        st.session_state['success_msg'] = ""

def skip_customer(desk_id: int):
    conn = get_db_connection()
    cursor = conn.cursor()

    # L·∫•y c√¥ng d√¢n hi·ªán t·∫°i ƒëang ph·ª•c v·ª•
    cursor.execute('''
        SELECT current_customer_cccd FROM desks WHERE desk_id = ?
    ''', (desk_id,))
    current_customer = cursor.fetchone()

    if current_customer and current_customer['current_customer_cccd']:
        cccd_to_skip = current_customer['current_customer_cccd']

        # L·∫•y v·ªã tr√≠ l·ªõn nh·∫•t trong h√†ng ƒë·ª£i
        cursor.execute('''
            SELECT MAX(position) FROM queues WHERE desk_id = ?
        ''', (desk_id,))
        max_position = cursor.fetchone()[0] or 0

        # ƒê·∫©y c√¥ng d√¢n hi·ªán t·∫°i xu·ªëng cu·ªëi h√†ng ƒë·ª£i v·ªõi tr·∫°ng th√°i "Ch∆∞a l√†m th·ªß t·ª•c"
        new_position = max_position + 1
        cursor.execute('''
            INSERT INTO queues (desk_id, cccd, position)
            VALUES (?, ?, ?)
        ''', (desk_id, cccd_to_skip, new_position))

        cursor.execute('''
            UPDATE customers SET status = 'Ch∆∞a l√†m th·ªß t·ª•c' WHERE cccd = ?
        ''', (cccd_to_skip,))

        # X√≥a c√¥ng d√¢n hi·ªán t·∫°i kh·ªèi b√†n
        cursor.execute('''
            UPDATE desks SET current_customer_cccd = NULL WHERE desk_id = ?
        ''', (desk_id,))

        conn.commit()

        # G·ªçi c√¥ng d√¢n ti·∫øp theo
        next_customer = process_next_customer(desk_id)

        # N·∫øu c√≥ c√¥ng d√¢n ti·∫øp theo, ph√°t √¢m thanh th√¥ng b√°o
        if next_customer:
            announce = f"M·ªùi c√¥ng d√¢n {next_customer.name}, s·ªë th·ª© t·ª± {next_customer.ticket_number}, ƒë·∫øn B√†n {desk_id}"
            st.session_state[f'audio_message_ban{desk_id}'] = announce  # L∆∞u tr·∫°ng th√°i th√¥ng b√°o
            audio_file = create_audio(announce)  # T·∫°o file √¢m thanh t·ª´ th√¥ng b√°o
            if audio_file:
                play_audio_autoplay(audio_file)  # Ph√°t √¢m thanh
                os.unlink(audio_file)  # X√≥a file √¢m thanh sau khi ph√°t
        else:
            st.warning("Kh√¥ng c√≥ c√¥ng d√¢n n√†o ƒëang ch·ªù t·∫°i b√†n n√†y.")
    else:
        st.warning("Kh√¥ng c√≥ c√¥ng d√¢n n√†o ƒëang l√†m th·ªß t·ª•c t·∫°i b√†n n√†y.")


def process_customers():
    st.sidebar.header("X·ª≠ l√Ω c√¥ng d√¢n")

    correct_password = "Tanhung@2020"

    if 'authenticated' not in st.session_state:
        st.session_state['authenticated'] = False

    if not st.session_state['authenticated']:
        password = st.sidebar.text_input("Nh·∫≠p m·∫≠t kh·∫©u ƒë·ªÉ x·ª≠ l√Ω", type="password")

        if password == correct_password:
            st.session_state['authenticated'] = True
            st.rerun()
        elif password:
            st.sidebar.error("M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!")

    if st.session_state['authenticated']:
        col1, col2 = st.sidebar.columns(2)

        # N√∫t cho b√†n 1
        with col1:
            if st.button("B·ªè qua - B√†n 1"):
                skip_customer(1)
                st.rerun()
            if st.button("G·ªçi c√¥ng d√¢n - B√†n 1"):
                customer = process_next_customer(1)
                if customer:
                    announce = f"M·ªùi C√¥ng d√¢n {customer.name}, s·ªë th·ª© t·ª± {customer.ticket_number}, ƒë·∫øn B√†n 1"
                    st.session_state['audio_message_ban1'] = announce
                    st.session_state['audio_desk'] = 1
                    st.rerun()

        # N√∫t cho b√†n 2
        with col2:
            if st.button("B·ªè qua - B√†n 2"):
                skip_customer(2)
                st.rerun()
            if st.button("G·ªçi c√¥ng d√¢n - B√†n 2"):
                customer = process_next_customer(2)
                if customer:
                    announce = f"M·ªùi c√¥ng d√¢n {customer.name}, s·ªë th·ª© t·ª± {customer.ticket_number}, ƒë·∫øn B√†n 2"
                    st.session_state['audio_message_ban2'] = announce
                    st.session_state['audio_desk'] = 2
                    st.rerun()

        # Sau khi nh·∫≠p m·∫≠t kh·∫©u ƒë√∫ng, hi·ªÉn th·ªã n√∫t hi·ªÉn th·ªã danh s√°ch v√† t·∫£i xu·ªëng
        toggle_list_display()
        download_customer_list()

def main():
    st.title("üé´ H·ªá th·ªëng x·∫øp h√†ng")

    # Kh·ªüi t·∫°o c∆° s·ªü d·ªØ li·ªáu
    init_db()

    # Hi·ªÉn th·ªã tr·∫°ng th√°i c·ªßa c√°c b√†n
    col1, col2 = st.columns(2)
    with col1:
        render_desk_status(1)
    with col2:
        render_desk_status(2)

    # Ph√°t √¢m thanh cho B√†n 1 n·∫øu c√≥ th√¥ng b√°o
    if 'audio_message_ban1' in st.session_state and st.session_state['audio_message_ban1']:
        audio_message = st.session_state['audio_message_ban1']
        st.success(audio_message)
        audio_file = create_audio(audio_message)
        if audio_file:
            play_audio_autoplay(audio_file)
            os.unlink(audio_file)
        del st.session_state['audio_message_ban1']

    # Ph√°t √¢m thanh cho B√†n 2 n·∫øu c√≥ th√¥ng b√°o
    if 'audio_message_ban2' in st.session_state and st.session_state['audio_message_ban2']:
        audio_message = st.session_state['audio_message_ban2']
        st.success(audio_message)
        audio_file = create_audio(audio_message)
        if audio_file:
            play_audio_autoplay(audio_file)
            os.unlink(audio_file)
        del st.session_state['audio_message_ban2']

    # Form ƒëƒÉng k√Ω
    registration_form()

    # X·ª≠ l√Ω c√¥ng d√¢n v√† ch·ªâ hi·ªán n√∫t sau khi nh·∫≠p m·∫≠t kh·∫©u
    process_customers()

    # T√≠nh nƒÉng ki·ªÉm tra s·ªë th·ª© t·ª± (th√™m v√†o sidebar)
    check_status()

if __name__ == "__main__":
    main()
