import streamlit as st
from collections import deque
import json
import os
from gtts import gTTS
import base64
import time
from dataclasses import dataclass
from typing import Dict, List, Optional
import tempfile

# C·∫•u h√¨nh trang Streamlit
st.set_page_config(
    page_title="H·ªá th·ªëng qu·∫£n l√Ω h√†ng ƒë·ª£i",
    page_icon="üé´",
    layout="wide"
)

# ƒê·ªãnh nghƒ©a classes
@dataclass
class Customer:
    name: str
    cccd: str
    ticket_number: int
    timestamp: float

class DeskManager:
    def __init__(self, desk_id: int):
        self.desk_id = desk_id
        self.queue = deque()
        self.current_customer = None

# Kh·ªüi t·∫°o session state
if 'initialized' not in st.session_state:
    st.session_state.desk1 = DeskManager(1)
    st.session_state.desk2 = DeskManager(2)
    st.session_state.customers = {}
    st.session_state.next_number = 1
    st.session_state.initialized = True

# H√†m x·ª≠ l√Ω file
def save_state():
    data = {
        'desk1': {
            'queue': list(st.session_state.desk1.queue),
            'current': st.session_state.desk1.current_customer
        },
        'desk2': {
            'queue': list(st.session_state.desk2.queue),
            'current': st.session_state.desk2.current_customer
        },
        'customers': st.session_state.customers,
        'next_number': st.session_state.next_number
    }
    
    # S·ª≠ d·ª•ng bi·∫øn m√¥i tr∆∞·ªùng cho t√™n file
    filename = os.environ.get('QUEUE_DATA_FILE', 'queue_data.json')
    
    try:
        with open(filename, 'w') as f:
            json.dump(data, f)
    except Exception as e:
        st.error(f"Kh√¥ng th·ªÉ l∆∞u d·ªØ li·ªáu: {str(e)}")

def load_state():
    # S·ª≠ d·ª•ng bi·∫øn m√¥i tr∆∞·ªùng cho t√™n file
    filename = os.environ.get('QUEUE_DATA_FILE', 'queue_data.json')
    
    try:
        if os.path.exists(filename):
            with open(filename, 'r') as f:
                data = json.load(f)
                
            st.session_state.desk1.queue = deque(data['desk1']['queue'])
            st.session_state.desk1.current_customer = data['desk1']['current']
            st.session_state.desk2.queue = deque(data['desk2']['queue'])
            st.session_state.desk2.current_customer = data['desk2']['current']
            st.session_state.customers = data['customers']
            st.session_state.next_number = data['next_number']
    except Exception as e:
        st.error(f"Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu: {str(e)}")

# H√†m x·ª≠ l√Ω √¢m thanh
@st.cache_data
def create_audio(_text: str) -> str:
    try:
        # T·∫°o file t·∫°m th·ªùi
        with tempfile.NamedTemporaryFile(delete=False, suffix='.mp3') as fp:
            temp_filename = fp.name
            
        # T·∫°o v√† l∆∞u file √¢m thanh
        tts = gTTS(text=_text, lang='vi')
        tts.save(temp_filename)
        
        # ƒê·ªçc file √¢m thanh v√† chuy·ªÉn ƒë·ªïi sang base64
        with open(temp_filename, 'rb') as audio_file:
            audio_bytes = audio_file.read()
            audio_base64 = base64.b64encode(audio_bytes).decode()
        
        # X√≥a file t·∫°m th·ªùi
        os.remove(temp_filename)
        
        # Tr·∫£ v·ªÅ HTML audio element
        return f"""
        <audio autoplay="true">
        <source src="data:audio/mp3;base64,{audio_base64}" type="audio/mp3">
        </audio>
        """
    except Exception as e:
        st.error(f"L·ªói t·∫°o √¢m thanh: {str(e)}")
        return ""

def add_customer(name: str, cccd: str) -> int:
    if cccd in st.session_state.customers:
        return -1

    customer = {
        'name': name,
        'cccd': cccd,
        'ticket_number': st.session_state.next_number,
        'timestamp': time.time()
    }

    st.session_state.customers[cccd] = customer
    st.session_state.next_number += 1

    # Ch·ªçn b√†n c√≥ √≠t ng∆∞·ªùi ch·ªù h∆°n
    if len(st.session_state.desk1.queue) <= len(st.session_state.desk2.queue):
        st.session_state.desk1.queue.append(customer)
        return len(st.session_state.desk1.queue)  # Tr·∫£ v·ªÅ v·ªã tr√≠ trong h√†ng ƒë·ª£i
    else:
        st.session_state.desk2.queue.append(customer)
        return len(st.session_state.desk2.queue)  # Tr·∫£ v·ªÅ v·ªã tr√≠ trong h√†ng ƒë·ª£i

def process_next_customer(desk: DeskManager) -> Optional[dict]:
    if desk.queue:
        customer = desk.queue.popleft()
        desk.current_customer = customer
        save_state()
        return customer
    return None

# UI Components
def render_desk_status(desk: DeskManager):
    st.subheader(f"B√†n {desk.desk_id}")
    
    st.markdown("##### ƒêang ph·ª•c v·ª•:")
    if desk.current_customer:
        st.markdown(f"""
        <div style='background-color: #e6f3ff; padding: 10px; border-radius: 5px;'>
            <h3 style='color: #0066cc;'>{desk.current_customer['name']}</h3>
            <p>S·ªë th·ª© t·ª±: {desk.current_customer['ticket_number']}</p>
        </div>
        """, unsafe_allow_html=True)
    else:
        st.markdown("<p style='color: #666;'>Ch∆∞a c√≥ kh√°ch h√†ng</p>", unsafe_allow_html=True)
    
    st.markdown("##### Danh s√°ch ch·ªù:")
    if desk.queue:
        for i, customer in enumerate(desk.queue, 1):
            st.markdown(f"{i}. {customer['name']} - S·ªë {customer['ticket_number']}")
    else:
        st.markdown("<p style='color: #666;'>Kh√¥ng c√≥ kh√°ch h√†ng ƒëang ch·ªù</p>", unsafe_allow_html=True)

def registration_form():
    st.header("ƒêƒÉng k√Ω m·ªõi")
    with st.form("register_form"):
        name = st.text_input("H·ªç v√† t√™n:")
        cccd = st.text_input("S·ªë CCCD (12 s·ªë):")
        submitted = st.form_submit_button("ƒêƒÉng k√Ω")
        
        if submitted:
            if not name or not cccd:
                st.error("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin")
                return
            
            if not cccd.isdigit() or len(cccd) != 12:
                st.error("S·ªë CCCD kh√¥ng h·ª£p l·ªá")
                return
            
            position = add_customer(name, cccd)
            if position != -1:
                ticket_number = st.session_state.next_number - 1
                st.success(f"ƒêƒÉng k√Ω th√†nh c√¥ng! S·ªë th·ª© t·ª± c·ªßa b·∫°n l√† {ticket_number}. B·∫°n ·ªü v·ªã tr√≠ {position} trong h√†ng ƒë·ª£i.")
            else:
                st.error("S·ªë CCCD ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω")


if 'current_desk1' not in st.session_state:
    st.session_state.current_desk1 = None
if 'current_desk2' not in st.session_state:
    st.session_state.current_desk2 = None
    
def process_customers():
    st.sidebar.header("X·ª≠ l√Ω kh√°ch h√†ng")
    
    col1, col2 = st.sidebar.columns(2)
    
    with col1:
        if st.button("G·ªçi kh√°ch - B√†n 1", key="desk1_button"):
            customer = process_next_customer(st.session_state.desk1)
            if customer:
                st.session_state.current_desk1 = customer
    
    with col2:
        if st.button("G·ªçi kh√°ch - B√†n 2", key="desk2_button"):
            customer = process_next_customer(st.session_state.desk2)
            if customer:
                st.session_state.current_desk2 = customer

    # Hi·ªÉn th·ªã √¢m thanh n·∫øu c√≥ kh√°ch h√†ng m·ªõi
    if st.session_state.current_desk1:
        audio_html = create_audio(
            f"M·ªùi kh√°ch h√†ng {st.session_state.current_desk1['name']}, s·ªë {st.session_state.current_desk1['ticket_number']}, ƒë·∫øn B√†n 1"
        )
        st.markdown(audio_html, unsafe_allow_html=True)
        st.session_state.current_desk1 = None
    
    if st.session_state.current_desk2:
        audio_html = create_audio(
            f"M·ªùi kh√°ch h√†ng {st.session_state.current_desk2['name']}, s·ªë {st.session_state.current_desk2['ticket_number']}, ƒë·∫øn B√†n 2"
        )
        st.markdown(audio_html, unsafe_allow_html=True)
        st.session_state.current_desk2 = None


# T·ªëi ∆∞u h√≥a vi·ªác rerun b·∫±ng c√°ch s·ª≠ d·ª•ng session state
if 'needs_rerun' not in st.session_state:
    st.session_state.needs_rerun = False

def check_status():
    st.sidebar.header("Ki·ªÉm tra tr·∫°ng th√°i")
    cccd = st.sidebar.text_input("Nh·∫≠p s·ªë CCCD ƒë·ªÉ ki·ªÉm tra")
    if st.sidebar.button("Ki·ªÉm tra"):
        if cccd in st.session_state.customers:
            customer = st.session_state.customers[cccd]
            
            # Ki·ªÉm tra xem kh√°ch h√†ng ƒëang ·ªü ƒë√¢u
            if customer == st.session_state.desk1.current_customer:
                st.sidebar.success(f"ƒêang ƒë∆∞·ª£c ph·ª•c v·ª• t·∫°i B√†n 1")
            elif customer == st.session_state.desk2.current_customer:
                st.sidebar.success(f"ƒêang ƒë∆∞·ª£c ph·ª•c v·ª• t·∫°i B√†n 2")
            else:
                # Ki·ªÉm tra trong h√†ng ƒë·ª£i
                for desk in [st.session_state.desk1, st.session_state.desk2]:
                    if customer in desk.queue:
                        position = list(desk.queue).index(customer) + 1
                        st.sidebar.info(f"ƒêang ch·ªù t·∫°i B√†n {desk.desk_id}, v·ªã tr√≠ th·ª© {position}")
                        break
        else:
            st.sidebar.error("Kh√¥ng t√¨m th·∫•y th√¥ng tin")

def process_next_customer(desk: DeskManager) -> Optional[dict]:
    if desk.queue:
        customer = desk.queue.popleft()
        desk.current_customer = customer
        save_state()
        st.session_state.needs_rerun = True
        return customer
    return None

# Trong h√†m main, th√™m ki·ªÉm tra needs_rerun
def main():
    st.title("üé´ H·ªá th·ªëng qu·∫£n l√Ω h√†ng ƒë·ª£i")
    
    # Load d·ªØ li·ªáu t·ª´ file (n·∫øu c√≥)
    load_state()
    
    # Hi·ªÉn th·ªã tr·∫°ng th√°i c√°c b√†n
    col1, col2 = st.columns(2)
    with col1:
        render_desk_status(st.session_state.desk1)
    with col2:
        render_desk_status(st.session_state.desk2)
    
    # Form ƒëƒÉng k√Ω
    registration_form()
    
    # X·ª≠ l√Ω kh√°ch h√†ng v√† ki·ªÉm tra tr·∫°ng th√°i
    process_customers()
    check_status()
    
    # Ki·ªÉm tra v√† reset flag needs_rerun
    if st.session_state.needs_rerun:
        st.session_state.needs_rerun = False
        st.rerun()

if __name__ == "__main__":
    main()
